<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, December 13, 2017, 12:05 AM -->
<!-- MuClient version 4.98 -->

<!-- Plugin "grinder" generated by Plugin Wizard -->

<muclient>
<plugin
   name="grinder"
   author="Gloominati"
   id="e7aaf975f7c32efd13dc53f7"
   language="Lua"
   purpose="sets con target to hotkey"
   date_written="2017-12-13 00:05:12"
   requires="4.98"
   version="1.0"
   >

</plugin>

<aliases>
  <alias
   script="grinderKill"
   match="kk"
   enabled="y"
  >
  </alias>
</aliases>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<script>
<![CDATA[

mob_regex = "(?P<name>[\\w\\s\\,\\-\\'\\.]+)"

aura_regex = {
	["good"] = "\\(Golden Aura\\)(?: \\((.*?)\\))?"
}

consider_flags = {
	["-20"] = "You would stomp %s into the ground\\.",
	["-10"] = "%s would be easy\\, but is it even worth the work out\\?",
	["-5"] = "No Problem\\! %s is weak compared to you\\.",
	["-2"] = "%s looks a little worried about the idea\\.",
	["1"] = "%s should be a fair fight\\!",
	["4"] = "%s snickers nervously\\.",
	["9"] = "%s chuckles at the thought of you fighting (?:\\w+)\\.",
	["15"] = "Best run away from %s while you can\\!",
	["20"] = "Challenging %s would be either very brave or very stupid\\.",
	["30"] = "%s would crush you like a bug\\!",
	["40"] = "%s would dance on your grave\\!",
	["50"] = "%s says \\'BEGONE FROM MY SIGHT unworthy\\!\\'",
	["51"] = "You would be completely annihilated by %s\\!",
}

first_test = {
	["4"] = "%s %s snickers nervously\\.",
	["9"] = "%s %s chuckles at the thought of you fighting (?:\\w+)\\.",
	["15"] = "%s Best run away from %s while you can\\!",
	["20"] = "%s Challenging %s would be either very brave or very stupid\\.",
	["30"] = "%s %s would crush you like a bug\\!",
	--["40"] = "%s %s would dance on your grave\\!",
}

grinder_target = nil

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
html_replacements = { 
   ["<"] = "&lt;",
   [">"] = "&gt;",
   ["&"] = "&amp;",
   ['"'] = "&quot;",
   }

-- fix text so that < > & and double-quote are escaped
function fixhtml (s)

  return (string.gsub (tostring (s), '[<>&"]', 
    function (str)
      return html_replacements [str] or str
    end ))

end -- fixhtml


function GeneralAdd (t, which, plural)
 
  assert (type (t) == "table", "Table must be supplied to add a " .. which)

  local k, v
  local xml = {}
  
  local send = fixhtml (t.send or "")  -- send is done differently
  t.send = nil
  
  -- turn into XML options  
  for k, v in pairs (t) do
  
    -- fix true/false to y/n
    if v == true then
      v = "y"
    elseif v == false then
      v = "n"
    end -- if true or false
    
    table.insert (xml, k .. '="' .. fixhtml (v) .. '"')
  end -- for loop
      
  assert (ImportXML (string.format (
          "<%s><%s %s ><send>%s</send></%s></%s>",
             plural,   -- eg. triggers
             which,    -- eg. trigger
             table.concat (xml, "\n"),  -- eg. match="nick"
             send,     -- eg. "go north"
             which,    -- eg. trigger
             plural)   -- eg. triggers
         ) == 1, "Import of " .. which .. " failed") 
  
end -- GeneralAdd 

function LuaAddTrigger (t)
  GeneralAdd (t, "trigger", "triggers")
end -- LuaAddTrigger

function LuaAddAlias (t)
  GeneralAdd (t, "alias", "aliases")
end -- LuaAddAlias 

function LuaAddTimer (t)
  GeneralAdd (t, "timer", "timers")
end -- LuaAddTimer 

function LuaAddMacro (t)
  GeneralAdd (t, "macro", "macros")
end 
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
function cleanMobName(raw_name)
	if raw_name ~= nil then
		local badCharacters = {",%s", "-%s*"}
		local badPronouns = {"^The%s", "^the%s", "^A%s", "^a%s", "^the%s", "%sof%s", "%sthe%s", "^an%s", "^An%s"}
		local trim = {"^%s"}
		local text = raw_name

		for _,delim in ipairs(badCharacters) do
			text = string.gsub(text, delim, " ")
		end --for

		for _,delim in ipairs(badPronouns) do
			text = string.gsub(text, delim, " ")
		end --for

		for _,delim in ipairs(trim) do
			text = string.gsub(text, delim, "")
		end --for
		Note(text)
		return text
	end --if
end -- CleanMobName

for k, v in pairs ( first_test ) do
	local clean = string.format( v, aura_regex.good, mob_regex )
	Note(clean)
	LuaAddTrigger {
		match = clean,
		regexp = true,
		enabled = true,
		script = "setGrinder"
	}
end

function setGrinder( sName, sLine, wildcards )
	Note("setting grinder: " .. wildcards.name)
	grinder_target = cleanMobName( wildcards.name )
end

function grinderKill()
	if grinder_target == nil or grinder_target == "" then Note("no grinder target") return end
	Execute( "initiate_attack " .. grinder_target )
end
]]>
</script>
</muclient>