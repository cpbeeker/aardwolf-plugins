<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, May 08, 2009, 10:32 AM -->
<!-- MuClient version 4.40 -->
<!-- $Id$ -->

<muclient>
<plugin
   name="xareaDB"
   author="Bast"
   id="aaa3cbbda10fa11787c6b438"
   language="Lua"
   purpose="add areas to a sqlite db"
   save_state="y"
   date_written="2009-05-08 10:31:50"
   requires="4.73"
   version="6.1"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

require "aarddb"

aarddb = Aarddb:new{}

local tareas = aarddb:lookupareasbykeyword('w')

for i,area in pairs(tareas) do
  ColourNote("orange", "black", string.format("%-5d %-5d %-15s %-30s", area.afrom, area.ato, area.keyword, area.name))
end
]]>
</description>

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="n"
   match="^.*$"
   sequence="103"
   regexp="y"
   omit_from_output="y"
   group="areareg"
   name="catchall"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^From To   Lock  (?&lt;fourth&gt;.*)[ ]+Area Name[ ]*$"
   sequence="99"
   script="parseheaders"
   regexp="y"
   omit_from_output="y"
   group="areareg"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\s*(?&lt;from&gt;\d+)\s+(?&lt;to&gt;\d+)\s+(?&lt;lock&gt;\d+)\s+(?&lt;fourth&gt;.+?)(  )+?(?&lt;name&gt;.+?)\s*$"
   sequence="100"
   script="parsearea"
   regexp="y"
   omit_from_output="y"
   group="areareg"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\s*(?&lt;from&gt;\d+)\s+(?&lt;to&gt;\d+)\s+(?&lt;fourth&gt;.+?)(  )+?(?&lt;name&gt;.+?)\s*$"
   sequence="101"
   script="parsearea"
   regexp="y"
   name="nolock"
   omit_from_output="y"
   group="areareg"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^---------------------------------------------------------------$"
   sequence="101"
   script="areas_done"
   regexp="y"
   omit_from_output="y"
   group="area"
  >
  </trigger>
</triggers>

<!--  Script  -->

<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "pluginhelper"
require "serialize"
require "commas"
require "verify"
require "tprint"
require "copytable"
require "aarddb"

aarddb = Aarddb:new{}

areasbykeyword = aarddb:getallareas()
areas = areasbykeyword
gettingareas = false

fixnames = {}
fixnames['The Abyssal Caverns of Sahuagi'] = 'The Abyssal Caverns of Sahuagin'
fixnames['The Darkside of the Fractured'] = 'The Darkside of the Fractured Lands'

fourthheader = ''

function get_areas()
  areas = {}
  gettingareas = true
  phelper:enabletriggroup("areareg", true)
  phelper:enabletriggroup("area", true)
  SendNoEcho('areas keywords')
end

function areas_done(name, line, wildcards)
  phelper:enabletriggroup("areareg", false)
  phelper:enabletriggroup("area", false)
  if next(areas) then
    aarddb:addareas(areas)
  end
  gettingareas = false
end

function new_area()
  local tarea = {}
  tarea['name'] = ""
  tarea['keyword'] = ""
  tarea['ato'] = -1
  tarea['afrom'] = -1
  tarea['alock'] = -1
  tarea['speedwalk'] = ""
  tarea['builder'] = ""
  return tarea
end

function parseheaders(name, line, wildcards)
  fourthheader = string.lower(trim(wildcards['fourth']))
end

function parsearea (name, line, wildcards)
  local name = trim(wildcards.name)
  area = new_area()
  if fixnames[name] then
    area.name = fixnames[name]
  else
    area.name = name
  end
  area.ato = wildcards.to
  area.afrom = wildcards.from
  area[fourthheader] = wildcards['fourth']
  if area.speedwalk == nil then
    area.speedwalk = ''
  end
  if area.keyword == nil then
    area.keyword = ''
  end
  if area.builder == nil then
    area.builder = ''
  end
  if name == "nolock" then
    area.alock = 0
  else
    area.alock = wildcards.lock
  end
  if area.keyword ~= '' then
    areas[area.keyword] = area
  end
end

function print_area(area)
  ColourNote("orange", "black", string.format("%-5d %-5d %-15s %-30s", area.afrom, area.ato, area.keyword, area.name))
end

function print_area_header()
  ColourNote("orange", "black", string.format("%-5s %-5s %-15s %-30s", "From", "To", "Keyword", "Name"))
  ColourNote("orange", "black", string.rep('-', 50))

end

function cmd_arealookup(cmddict)
  if #cmddict == 0 or cmddict[1] == 'help' then
    phelper:plugin_header('translate')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " lu <sqlst> ")    
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "lookup areas")   
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) a sql statement") 
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Examples: name like '%lake%' - all areas with the word lake in the name")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "          keyword like '%death%' - all areas with death in the keyword")  
    return true
  end
  if cmddict['args'] then
    local stuff = aarddb:lookupareas(cmddict['args'])
    print_area_header()
    if next(stuff) then
      for i,v in pairs(stuff) do
        print_area(v)
      end
    else
      ColourNote("red", "black", 'None')
    end
  end
  ColourNote("", "", "")
end

function get_areabykeyword(cmddict)
  if #cmddict == 0 or cmddict[1] == 'help' then
    phelper:plugin_header('keyword')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " key <keyword> ")    
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "show areas by keyword")   
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the keyword of the areas to show") 
    return true
  end
  local keyword = cmddict[1]
  local tareas = aarddb:lookupareasbykeyword(keyword)

  print_area_header()
  for i,v in tableSort(tareas, "afrom") do
    print_area(v)
  end

  ColourNote("", "", "")
end

function get_areabyname(cmddict)
  if #cmddict == 0 or cmddict[1] == 'help' then
    phelper:plugin_header('name')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " name <name> ")    
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "show areas by name")   
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the name of the areas to show") 
    return true
  end
  local name = strjoin(' ', cmddict)
  local tareas = aarddb:lookupareasbyname(name)

  print_area_header()
  for i,v in tableSort(tareas, "afrom") do
    print_area(v)
  end

  ColourNote("", "", "")
end

function get_areabylevel(cmddict)
  if #cmddict == 0 or cmddict[1] == 'help' then
    phelper:plugin_header('level')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " level <level> ")    
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "show areas by level")   
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the level of the areas to show") 
    return true
  end
  local level = cmddict[1]
  local tareas = aarddb:lookupareasbylevel(level)

  print_area_header()
  for i,v in tableSort(tareas, "afrom") do
    print_area(v)
  end

  ColourNote("", "", "")
end

function get_allareas(cmddict)
  if cmddict[1] == 'help' then
    phelper:plugin_header('translate')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " all")    
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "get all areas")   
  end
  local tareas = aarddb:getallareas()

  print_area_header()
  for i,v in tableSort(tareas, "afrom") do
    print_area(v)
  end

  ColourNote("", "", "")
end
]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char.status") then
      local res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
      char = assert (loadstring ('return ' .. gmcparg or ""))()

      if tonumber(char.status.state) == 3 and gettingareas == false and ((areas and not next(areas)) or not areas) then
        --print('getting areas')
        get_areas()
        --print('done getting areas')
      end

    end
  end

  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper
  if IsPluginInstalled("aaa2beeda10fa11787c6b438") then
    ColourNote("red", "black", "AreaDB will not load if broadcast_area is installed, unloading")
    DoAfterSpecial(2, "plugins unload aaa3cbbda10fa11787c6b438", 10)
    return
  end

  if IsPluginInstalled("aaa3cbbce15fa11787c6b438") then
    ColourNote("red", "black", "AreaDB_lookup will nolonger be needed, please use " .. phelper.cmd .. " instead")
    DoAfterSpecial(2, "plugins unload aaa3cbbce15fa11787c6b438", 10)
    return
  end
  
  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin ("aard_GMCP_handler", "3e7dedbe37e44942dd46d264")

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'ardb')
phelper:set_default('plugin_colour', 'cyan')

phelper:add_cmd('lu', {func=cmd_arealookup, help="lookup areas", sortgroup='Obtaining information on areas', prio = 30})
phelper:add_cmd('keyword', {func=get_areabykeyword, help="get areas by keyword", sortgroup='Obtaining information on areas', prio = 31})
phelper:add_cmd('name', {func=get_areabyname, help="get areas by name", sortgroup='Obtaining information on areas', prio = 32})
phelper:add_cmd('level', {func=get_areabylevel, help="get areas by level", sortgroup='Obtaining information on areas', prio = 33})
phelper:add_cmd('all', {func=get_allareas, help="get all areas", sortgroup='Obtaining information on areas', prio = 34})

phelper:add_cmd('refresh', {func=get_areas, help="refresh areas", sortgroup='Gather info on areas', prio = 40})

phelper:enable()

]]>

</script>
</muclient>
