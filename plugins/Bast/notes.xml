<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Notes"
   author="Bast"
   id="eeec8781c5408278ccda7100"
   language="Lua"
   purpose="a plugin to create notes and do lookups on those notes"
   date_written="2008-10-15 07:35"
   requires="4.30"
   version="2.01"
   >
<description trim="y">
<![CDATA[

]]>
</description>

</plugin>


<!--  Triggers  -->

<triggers>

</triggers>

<!--  Script  -->


<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "pluginhelper"
require "ldplugin"
require "tprint"
require "aarddb"
require "qmapper"

aarddb = Aarddb:new{}

roomnotes = {}

function format_note(tnote)
  local rooms =  aarddb:getroomsfornote(tnote.note_id)
  local tstr = string.format('---------------------- Note: %d ----------------------', tnote.note_id)
  ColourNote("orange", "", tstr)
  ColourNote("silver", "", string.format('Area     : %s', tnote.area))
  if rooms and next(rooms) then
    local tstr = 'Rooms    :'
    for i,v in ipairs(rooms) do
      tstr = tstr .. ' ' .. tostring(v.room)
    end
    ColourNote("silver", "", tstr)    
  end
  ColourNote("silver", "", string.format('Keywords : %s', tnote.keywords))
  ColourNote("silver", "", "----------------------")
  TextToColourTell(tnote.note)
  ColourNote("","","")
  ColourNote("orange", "", string.rep("-", #tstr))
end

function cmd_notelookup(cmddict)
  if cmddict[1] == 'help' then
    phelper:plugin_header('lu')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " lu <sqlstmt> ")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "lookup a note")        
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "If no arguments are given, will display all notes")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the sql statement to use")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Examples: 'area = \"deathtrap\"' - all notes for the area deathtrap")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "          'keywords like \"%key%\"' - all notes with the keyword key")  
    return
  end
  local stuff = {}
  if cmddict['args'] ~= "" then
    stuff = aarddb:lookupnotes(cmddict['args'])
  else
    stuff = aarddb:getallnotes()
  end

  if next(stuff) then
    for i,v in pairs(stuff) do
      format_note(v)
    end
  else
    ColourNote("orange", "", "Nothing found")
  end
end

function cmd_notearea(cmddict)
  if cmddict[1] and cmddict[1] ~= 'help' then
    local sqlstr = 'area = "' .. cmddict[1] .. '"'
    cmddict['args'] = sqlstr
    cmd_notelookup(cmddict)
  else
    phelper:plugin_header('area')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " area <areakeyword> ")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "lookup a note by area")        
  end
end

function cmd_notekeyword(cmddict)
  if cmddict[1] and cmddict[1] ~= 'help' then
    local sqlstr = 'keywords like "%' .. tostring(cmddict[1]) .. '%"'
    cmddict['args'] = sqlstr
    cmd_notelookup(cmddict)
  else
    phelper:plugin_header('area')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " area <areakeyword> ")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "lookup a note by area")        
  end
end

function cmd_addnote(cmddict)
  local note = {}
  local printhelp = false
  if not (cmddict[1] and cmddict[2] and cmddict[3]) and cmddict[1] ~= 'help' then
    --print('didnt get anything')
    local bareas = aarddb:getallareas()
    local ttable = {}
    for i,v in pairs(bareas) do
      ttable[i] = v.name
    end
    ttable['none'] = '1 - None'
    note['area'] = utils.filterpicker (ttable, 'Pick the area')
    note['keywords'] = utils.inputbox ( 'Add keywords for this note', 'Keywords')
    note['note'] = utils.editbox ( 'Enter the note\nYou can use color codes', 'Note')
  elseif cmddict[1] ~= 'help' then
    note['area'] = cmddict[1]
    note['keyword'] = cmddict[2]
    note['note'] = cmddict[3]  
  else
    printhelp = true
  end
  if note['area'] and note['keywords'] and note['note'] then
    local rowid = aarddb:addnote(note)
    print('added note', rowid)
  else
    printhelp = true
  end
  if printhelp then
    phelper:plugin_header('add')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " add <noteid> ")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "add a note")        
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "If no arguments are given, the plugin will ask for them, otherwise 3 arguments are required")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the area to add to the note, if no area use 'None'")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 2 is the keywords to add to the note, if multiple keywords, surround with single or double quotes")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 3 is the note text, surround with single or double quotes")
    return  
  end
end

function cmd_addroom(cmddict)
  if cmddict[1] == 'help' or not cmddict[1] then
      phelper:plugin_header('room')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " room <noteid> ")
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "add a note to a room")        
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the note number to add to the room you are currently in") 
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) if this argument is specified it is a room id from gmcp or the mapper") 
      return
  end
  local note = tonumber(cmddict[1])
  local room = room.num
  if cmddict[2] and tonumber(cmddict[2]) then
    room = tonumber(cmddict[2])
  end
  local notes = aarddb:lookupnotes('note_id = ' .. tostring(note))
  if next(notes) then
    local troom = querymapper('SELECT * from rooms where uid = ' .. tostring(room))
    if next(troom) then
      aarddb:addnotetoroom(room, note)
      phelper:plugin_header('room')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Added Note: " .. tostring(note) .. " to Room: " .. tostring(room)) 
    else
      phelper:plugin_header('room')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "That room does not exist")    
    end
  else
    phelper:plugin_header('room')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "That note does not exist")
  end
end

function cmd_removeroom(cmddict)
  if cmddict[1] == 'help' or not cmddict[1] then
      phelper:plugin_header('rroom')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " rroom <noteid> ")
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "remove a note from a room")        
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the note number to add to the room you are currently in") 
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) if this argument is specified it is a room id from gmcp or the mapper") 
      return
  end
  local note = tonumber(cmddict[1])
  local room = room.num
  if cmddict[2] and tonumber(cmddict[2]) then
    room = tonumber(cmddict[2])
  end
  local notes = aarddb:lookupnotes('note_id = ' .. tostring(note))
  if next(notes) then
    local troom = querymapper('SELECT * from rooms where uid = ' .. tostring(room))
    if next(troom) then
      aarddb:removenotefromroom(room, note)
      phelper:plugin_header('rroom')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Removed Note: " .. tostring(note) .. " from Room: " .. tostring(room)) 
    else
      phelper:plugin_header('rroom')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "That room does not exist")    
    end
  else
    phelper:plugin_header('rroom')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "That note does not exist")
  end
end

function cmd_removenote(cmddict)
  if cmddict[1] == 'help' or not cmddict[1] then
      phelper:plugin_header('remove')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " remove <noteid> ")
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "remove a note")        
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the id of the note to remove")
  else
    local changes = aarddb:removenote(cmddict[1])
    if changes > 0 then
      ColourNote(RGBColourToName(var.plugin_colour), "black", "Note " .. tostring(cmddict[1]) .. " was deleted.")
      roomnotes = {}
    else
      ColourNote(RGBColourToName(var.plugin_colour), "black", "Nothing was deleted, please check your note id")
    end
  end

end

function checkroomnotes(room)
  local roomstuff = {}
  if char and char.status and tonumber(char.status.state) == 3 then
    if roomnotes[room] then
      roomstuff = roomnotes[room]
    else
      local stuff = aarddb:getnotesforroom(tonumber(room))
      if next(stuff) then
        roomnotes[room] = {}
        for i,v in pairs(stuff) do
          roomnotes[room][v.note_id] = v
        end
        roomstuff = roomnotes[room]
      end
    end
    if roomnotes[room] and next(roomnotes[room]) then
      ColourNote("","","")
      for i,note in pairs(roomnotes[room]) do
        format_note(note)
      end
    end
  end
end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char.status") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
      char = assert (loadstring ('return ' .. gmcparg or ""))()

    elseif text:find("room.info") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room.info")
      room = assert (loadstring ('return ' .. gmcparg or ""))()

      if phelper.roomnotes then
        checkroomnotes(tonumber(room.num))
      end

    end
  end

  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin ("areaDB")

  phelper:OnPluginEnable()

  if IsConnected() then
    CallPlugin("3e7dedbe37e44942dd46d264","Send_GMCP_Packet","request char")
    CallPlugin("3e7dedbe37e44942dd46d264","Send_GMCP_Packet","request room")
  end

end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState


]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'bn')
phelper:set_default('plugin_colour', 'orange')

phelper:add_cmd('add', {func=cmd_addnote, help="add notes", sortgroup="Creating, Modifying and Deleting a note", prio=40})
phelper:add_cmd('room', {func=cmd_addroom, help="add note to a room", sortgroup="Creating, Modifying and Deleting a note", prio=41})
phelper:add_cmd('rroom', {func=cmd_removeroom, help="remove a note from a room", sortgroup="Creating, Modifying and Deleting a note", prio=42})
phelper:add_cmd('remove', {func=cmd_removenote, help="remove a note, use note id", sortgroup="Creating, Modifying and Deleting a note", prio=43})

phelper:add_cmd('lu', {func=cmd_notelookup, help="lookup notes", sortgroup="Getting information about a note", prio=46})
phelper:add_cmd('area', {func=cmd_notearea, help="lookup notes by area", sortgroup="Getting information about a note", prio=47})
phelper:add_cmd('keyword', {func=cmd_notekeyword, help="lookup notes by keyword", sortgroup="Getting information about a note", prio=48})

phelper:add_setting('roomnotes', {help="show notes in rooms", type="bool", default=verify_bool(true)})

phelper:enable()

]]>
</script>
</muclient>