<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, December 09, 2017, 11:06 PM -->
<!-- MuClient version 4.98 -->

<!-- Plugin "mazer" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mazer"
   author="Gloominati"
   id="4bdd4a1a1065e806fa5fd82c"
   language="Lua"
   purpose="navigate mazes"
   date_written="2017-12-09 23:06:16"
   requires="4.98"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Maps mazes
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Plugin help  -->

<triggers>

	<trigger
	enabled="n"
	match="^\[ Exits\: .*? \]$"
	regexp="y"
	group="mz_step"
	script="resolveStep"
	>
	</trigger>
	
</triggers>

<aliases>

	<alias
	script="OnHelp"
	match="mazer:help"
	enabled="y"
	>
	</alias>

	<alias
	script="Commands"
	match="^mz (?P<command>.+?)$"
	regexp ="y"
	enabled="y"
	>
	</alias>

</aliases>

<script>
<![CDATA[

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "serialize"
require "commas"
require "pluginhelper"
require "verify"
require 'colours'
require 'tprint'
require 'sqlitedb'
require 'aardutils'
require 'tablefuncs'
require "gmcphelper"

function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

function Commands( sName, sLine, wildcards )
	local command = wildcards[1]
	
	local action = { }
	
	-- print gmcp room details
	function action.show()
		tprint( getRoomInfo() )
	end
	
	-- load first room
	function action.go()
		startMazer()
		Note("mz go:")
		tprint(mz_rooms)
	end
	
	-- find next step
	function action.fstep()
		findNextStep()
		Note("")
		Note("mz fstep:")
		Note(mz_nextExit)
	end
	
	function action.step()
		takeStep()
		Note("")
		Note("mz step")
		Note(mz_nextExit)
	end
	
	function action.rstep()
		resolveStep()
	end
	
	if setContains(action, command) then
		action[wildcards.command]()
	end
end

function startMazer()
	local roomInfo = getRoomInfo()
	mz_rooms = {}
	
	mz_rooms[roomInfo.num] = roomInfo.exits
	mz_currentRoom = roomInfo.num
end

-- returns a mazer formatted room table of current room
function getMazerRoom()
	local gmcp_room = getRoomInfo()	
	return { [gmcp_room.num] = gmcp_room.exits }
end

-- finds an unexplored exit and take it.
function findNextStep()
	local exit, room = findNextExit()
	local run = findPath( exit, room )
	mz_nextExit = exit
end

-- discovers an unexplored exit in current room
function findNextExit()
	local firstExit = findEmptyExit( mz_rooms[mz_currentRoom] )
	local secondExit = nil
	local finalExit = nil
	local finalRoom = nil
	
	if not firstExit then
		for roomNumber, exits in pairs ( mz_rooms ) do 
			secondExit = findEmptyExit( exits )
			
			if secondExit ~= false then 
				finalExit = secondExit
				finalRoom = roomNumber
			end
		end
	else
		finalExit =  firstExit
		finalRoom = mz_currentRoom
	end
	
	return finalExit, finalRoom
end
	
function findEmptyExit( exits )
	for exit, room in pairs( exits ) do
		if room == -1 or room == "-1" then
			return exit
		end
	end
	return false
end

function getPath( exit, room )
	local runPath = "run "
	
	if room == mz_currentRoom then
		return runPath .. exit
	end
	
	findPath ( mz_currentRoom, room )
end

function findpath( startRoom, endRoom )
	for x, r in pairs ( mz_rooms[startRoom] ) do end
end

-- takes step
function takeStep()
	Execute( mz_nextExit )
end

-- resolves step, finds where we are
function resolveStep( sName, sLine, wildcards )
	EnableTriggerGroup( "mz_step", false )
	local lastRoom = mz_currentRoom
	local lastStep = mz_nextExit
	local roomInfo = getRoomInfo()
	
	mz_rooms[lastRoom][lastStep] = roomInfo.num
	
	mz_currentRoom = roomInfo.num
	
	if not setContains( mz_rooms, roomInfo.num ) then
		mz_rooms[mz_currentRoom] = roomInfo.exits
	end
	
	Note("resolveStep()")
	tprint(mz_rooms)
end

function getRoomInfo()
  return gmcp("room.info")
end

function getRoomNumber()
	return getRoomInfo().num
end

function getRoomExits()
	return getRoomInfo().exits
end

function setContains(set, key)
    return set[key] ~= nil
end

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------- 443
-- variabls

mz_rooms = {}
mz_room = {}
mz_currentRoom = nil
mz_nextExit = nil

]]>
</script> 

</muclient>
