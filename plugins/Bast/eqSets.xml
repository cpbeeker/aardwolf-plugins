<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="eqSets"
   author="Bast"
   id="aaa22efed92ffc6146964abc"
   language="Lua"
   purpose="create sets of eq"
   save_state="y"
   date_written="2009-02-22 14:20:07"
   requires="4.73"
   version="6.1"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

]]>
</description>
</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<triggers>
</triggers>

<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "serialize"
require "commas"
require "pluginhelper"
require "verify"
require "aardutils"
require "chardb"
require 'colours'
require "eqdb"
require "formatitem"

eqdb = EQdb:new{}

char = nil

olddict = {}
olditem = {}

eqdbcmd = nil

function runeqdbcmd(cmd)
  if eqdbcmd == nil or eqdbcmd == '' then
    eqdbcmd = GetPluginVariable("aaa56faed92ffc6146964abc", 'cmd')
  end
  Execute(eqdbcmd .. " " .. cmd)
end

function cmd_close(cmddict)
  eqdb:close('cmd_close', true)
end

function cmd_list(cmddict)
  phelper:plugin_header('List')
  local sets = eqdb:getsetnames()
  if next(sets) then
    for i,v in pairs(sets) do
      print(v.eqsetname)
    end
  else
    print('no eqsets')
  end
end

function figureaddtosetargs(args)
  local targs = {}
  for i,v in ipairs(args) do
    local titem = eqdb:getitem(tonumber(v))
    local found = false
    if i == 1 and titem then
      targs['serial'] = v
      found = true
    elseif i == 1 and not titem then
      print('argument 1 is not a valid serial')
      return nil
    else
      local targ = tonumber(v)
      if not targ then
        --print('-- either container keyword or wearloc, or setname')
        local titem = eqdb:getitem(v)
        if wearlocreverse[v] then
          --print('wearloc for arg ' .. tostring(v))      
          targs['wearloc'] = v
          found = true
        elseif titem then
          --print('container for arg', tostring(v))
          targs['container'] = tonumber(v)
          found = true
        else
          --print('setname for arg ' .. tostring(v))      
          targs['setname'] = v
          found = true
        end
      else
        if targ < 211 then
          --print('level for arg ' .. tostring(v))      
          targs['level'] = tonumber(v)
          found = true
        elseif eqdb:getitem(v) then    
          --print('got an item, so container for arg' .. tostring(v))
          targs['container'] = tonumber(v)
          found = true      
        end
      end
    end
    if not found then
      print('Could not find what ' .. v .. ' is, please try different arguments')
      return nil
    end
  end
  return targs
end

function cmd_add(cmddict)
  if cmddict[1] == 'help' or not cmddict[1] then
    phelper:plugin_header('Add')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " add <serial> <location> <container> <level|setname>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "add an item to a set")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Note: do not create named sets that are only numbers, as they will be treated as level sets")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the serial number of the item")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) location is the wearable location, this will default to wherever the item is wearable")       
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) container is the container to place it in when removing the item")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "  and defaults to the current container that the item is in")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) level or setname")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "  level is the level to wear the eq, which is defaulted to the level of the item")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "  setname is the set name")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "  if both level and setname are not included, the command will default to the level of the item")    
    return
  end
  olddict = cmddict
  -- need serial, wearloc, container, level|setname (optional)
  local serial = nil
  local wearloc = nil
  local container = nil
  local level = nil
  if cmddict[1] then
    local args = figureaddtosetargs(cmddict)
    if args == nil then
      phelper:plugin_header('Add')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Could not figure out one of the arguments, please try with other arguments")     
      return    
    end
    local titem = eqdb:getitem(args['serial'])
    local ditem = eqdb:getitemdetails(args['serial'])
    if not ditem or ditem.keywords == '' or not ditem.keywords then
      olditem = titem
      -- we don't have the score
      -- get the item from containers
      phelper:register_remote("aaa56faed92ffc6146964abc", "itemchange", "onitemchange", true)
      CallPlugin("aaa56faed92ffc6146964abc", "getitemdetails", titem.serial, true, true)
      return
    end
    if not args['level'] and not args['setname'] then
      -- get level of item by serial
      args['level'] = titem.level
    end
    if not args['container'] then
      -- get current container of item by serial
      args['container'] = titem.containerid
    end
    if not args['wearloc'] and ditem.score then
      args['wearloc'] = ditem.wearable
    end
    if not wearlocreverse[args['wearloc']] then
      phelper:plugin_header('Add')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "not a valid wearloc")
      return
    end      
    if args['serial'] and args['wearloc'] and args['container'] and args['level'] then
      if ditem and ditem.level > args['level'] then
        phelper:plugin_header('Add')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", "This item is too high a level for set " .. tostring(args['level']))
        return
      elseif eqdb:checklevelsetitem(args['serial'], args['level']) then
        phelper:plugin_header('Add')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", "This item has already been set to be worn")
        return     
      elseif eqdb:checklevelsetwearloc(args['level'], args['wearloc']) then
        phelper:plugin_header('Add')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", string.format("There is already an item set at level %s for wearloc %s", args['level'], args['wearloc']))      
        return
      elseif not checkcorrectwearlocation(ditem.wearable, args['wearloc']) then
        print(ditem.wearable)
        phelper:plugin_header('Add')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", string.format("Cannot wear this item at the wear location %s", args['wearloc']))      
        return      
      end
      eqdb:addsetitem(args['serial'], args['wearloc'], args['container'], args['level'])
      phelper:plugin_header('Add')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", string.format("Item: %d will now be set to wear at level %d at location %s", args['serial'], args['level'], args['wearloc']))   
      return
    elseif args['serial'] and args['wearloc'] and args['container'] and args['setname'] then
      if not checkcorrectwearlocation(ditem.wearable, args['wearloc']) then
        phelper:plugin_header('Add')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", string.format("Cannot wear this item at the wear location %s", args['wearloc']))      
        return      
      elseif eqdb:checknamesetitem(args['serial'], args['wearloc'], args['setname']) then
        phelper:plugin_header('Add')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", string.format("There is already an item in set %s for wearloc %s", args['setname'], args['wearloc']))      
        return      
      end
      local changes = eqdb:addsetitem(args['serial'], args['wearloc'], args['container'], args['setname'])
      --print('changes', changes)
      if changes > 0 then
        phelper:plugin_header('Add')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", string.format("Item: %d will now be set to wear at location %s for eqset %s", args['serial'], args['wearloc'], args['setname']))   
        return
      else
        phelper:plugin_header('Add')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Could not add this to a set")   
        return      
      end
    else
      phelper:plugin_header('Add')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Could not figure out one of the arguments, please try with other arguments")     
      return
    end
  end
end

function showsetstats(set)
  local fitem = formatitem(set)
  for i,v in ipairs(fitem) do
    TextToColourTell(v)
    ColourNote("", "", "")
  end
  ColourNote("", "", "")
end

function getsetstats(setn)
  local stats = {}
  stats['resistmod'] = {}
  stats['statmod'] = {}
  stats['affectmod'] = {}
  stats['skillmods'] = {}
  local level = tonumber(setn)
  local titems = eqdb:getset(setn)
  for i,v in pairs(titems) do
    local ditem = eqdb:getitemdetails(v.serial)
    if ditem then
      stats['score'] = (stats['score'] or 0) + ditem['score']
      stats['weight'] = (stats['weight'] or 0) + ditem['weight']            
      if ditem['statmod'] then
        for key,mod in pairs(ditem['statmod']) do
          stats['statmod'][key] = (stats['statmod'][key] or 0) + tonumber(mod)
        end
      end
      if ditem['resistmod'] then
        for key,mod in pairs(ditem['resistmod']) do
          stats['resistmod'][key] = (stats['resistmod'][key] or 0) + tonumber(mod)
        end
      end
      if ditem['affectmod'] then
        for key,mod in ipairs(ditem['affectmod']) do
          table.insert(stats['affectmod'], mod)
        end
      end
    else
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Do not have stats for " .. tostring(v.serial))
    end
  end
  if stats then
    if level then
      stats['cname'] = 'Level @r' .. tostring(level) .. '@w set'
      stats['name'] = 'Level ' .. tostring(level) .. ' set'
    else
      stats['cname'] = '@r' .. tostring(setn) .. ' @w set'
      stats['name'] = tostring(setn) .. ' set'
    end
    --tprint(stats)
    return stats  
  else
    return nil
  end
end

function cmd_getstats(cmddict)
  if not cmddict[1] then
    phelper:plugin_header('getstats')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " stats <eqset>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "get the stats for an eqset")        
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the setname or level")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "multiple eqset arguments will show a compare of the eqsets")
  else
    if #cmddict == 1 then
      local sets = getsetstats(cmddict[1])
      if sets then
        showsetstats(sets)
      else
        print('no data for set: ' .. tostring(cmddict[1]))
      end
    else
      local sets = {}
      local tstyle = string.format('%-15s', 'Name') .. string.format(' %-5s ', 'Score') .. formatstatsheader()
      TextToColourTell(tstyle)
      ColourNote("", "", "")
      ColourNote("", "", string.rep('-', 89))      
      for i,v in ipairs(cmddict) do
        local stats = getsetstats(v)
        if stats then
          local tstyle = string.format('%-15s', string.sub(stats.name, 1, 15)) .. string.format(' @C%-5s@w ', stats.score)
          tstyle = tstyle .. formatstats(stats.statmod)
          TextToColourTell(tstyle)
          ColourNote("", "", "")        
        else
          ColourNote(RGBColourToName(phelper.plugin_colour), "black", "no data for set: " .. tostring(v))
        end
      end   
      ColourNote("", "", "")      
    end
  end
end

function putitem(item)
  local container = eqdb:getolditemcontainer(item.serial)
  olditem = copytable.deep(item)
  if container then
    olditem.containerid = 'Inventory'
    putobjectincontainer(olditem, container)
  end
end

function wearitem(item, sitem, shitem, hitem)
  if item and item.containerid ~= 'Worn' then
    local ditem = eqdb:getitemdetails(item.serial)
    if ditem and ditem.level > (tonumber(char.status.level) + (char.base.tier * 10)) then
      TextToColourTell('Will not wear ' .. ditem.cname .. ' at location ' .. item.wearloc .. ' because of level restriction')
      ColourNote("", "", "")
      return
    end
    local olditem = eqdb:getitembywearslot(wearlocreverse[item.wearloc])    
    if not olditem then
      putobjectininv(item.serial)
      local cmd = 'wear ' .. tostring(item.serial) .. ' ' .. item.wearloc
      SendNoEcho('wear ' .. tostring(item.serial) .. ' ' .. item.wearloc)    
    elseif olditem.serial ~= item.serial then
      putobjectininv(item.serial)
      local cmd = 'wear ' .. tostring(item.serial) .. ' ' .. item.wearloc
      SendNoEcho('wear ' .. tostring(item.serial) .. ' ' .. item.wearloc)
      if next(olditem) then
        local container = eqdb:getolditemcontainer(olditem.serial)
        if container then
          olditem.containerid = 'Inventory'
          putobjectincontainer(olditem, container)
        end
      end          
    end
    --print('wearloc', item.wearloc)
    --print('sitem', sitem)
    --print('shitem', shitem)
    --print('hitem', hitem)
    if item.wearloc == 'second' and (shitem or hitem) then
      --print('wearloc second with shitem or hitem')
      if shitem then
        putitem(shitem)
      end
      if hitem then
        putitem(hitem)
      end
    elseif (item.wearloc == 'shield' or item.wearloc == 'hold') and sitem then
      putitem(sitem)
    end
  end
end

function wearset(setname, wtype)
  local sitem = eqdb:getitembywearslot(wearlocreverse['second'])
  local shitem = eqdb:getitembywearslot(wearlocreverse['shield'])
  local hitem = eqdb:getitembywearslot(wearlocreverse['hold'])    
  local defloc = 'second'
  local dont = {}
  if wtype then
    defloc = 'shield'
  end
  if defloc == 'second' then
    dont['shield'] = 1
    dont['hold'] = 1
  else
    dont['second'] = 1
  end
  for i,v in tableSort(eqdb:getset(setname), nil, nil, true) do
    if not dont[v.wearloc] then
      wearitem(v, sitem, shitem, hitem)
    end
  end
end

function cmd_wearset(cmddict)
  if cmddict[1] then
    local setname = cmddict[1]
    if tonumber(setname) then
      local level = tonumber(char.status.level) + (char.base.tier * 10)
      if tonumber(setname) > level then
        phelper:plugin_header('wearset')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", "You are not a high enough level to wear this set")    
        return
      end
    end
    local wtype = nil
    local wearloc = nil
    if cmddict[2] == 'alt' or cmddict[3] == 'alt' then
      wtype = 'alt'
    end
    if wearlocreverse[cmddict[2]] then
      wearloc = cmddict[2]
    elseif wearlocreverse[cmddict[3]] then
      wearloc = cmddict[3]
    end
    if not wearloc then
      wearset(setname, wtype)
    else
      local sitem = eqdb:getitembywearslot(wearlocreverse['second'])
      local shitem = eqdb:getitembywearslot(wearlocreverse['shield'])
      local hitem = eqdb:getitembywearslot(wearlocreverse['hold'])
      item = eqdb:getsetwearloc(wearloc, setname)
      if item then
        wearitem(item, sitem, shitem, hitem)
      else
        print(string.format('no item to wear for set %s in wearloc %s', setname, wearloc))
      end
    end
  else
    phelper:plugin_header('wearset')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " wearset <setname|level> <wearloc> 'alt'")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "check and equip items that are not worn for a set`")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the setname or level")     
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) wearloc is the keyword for the location from 'wearable', or 'all' for all locations")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) the alt keyword will equip the shield/hold items instead of a second weapon") 
  end
end

function cmd_checklevel(cmddict)
  if cmddict[1] == 'help' then
    phelper:plugin_header('checklevel')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " checklevel <location> 'alt'")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "check and equip items that are not worn for your level")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) location is the keyword for the location from 'wearable'")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) the 'alt' keyword will equip a shield and/or held item instead of a dual weapon when using 'all'")  
    return
  end
  local ti = nil
  local wtype = nil
  for i,v in ipairs(cmddict) do
    if v == 'alt' then
      ti = i
      wtype = 'alt'
    end
  end
  if ti then
    table.remove(cmddict, ti)
  end
  local level = tonumber(char.status.level) + (char.base.tier * 10)
  if cmddict[1] then
    wearloc = cmddict[1]
    if not wearlocreverse[wearloc] then
      phelper:plugin_header('checklevel')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "not a valid wearloc")
      return      
    end
    local sitem = eqdb:getitembywearslot(wearlocreverse['second'])
    local shitem = eqdb:getitembywearslot(wearlocreverse['shield'])
    local hitem = eqdb:getitembywearslot(wearlocreverse['hold'])        
    item = eqdb:getsetwearloc(wearloc, level)
    if item then
      wearitem(item, sitem, shitem, hitem)
    end
  else
    wearset(level, wtype)
  end
end

function cmd_remove(cmddict)
  if cmddict[1] and cmddict[2] then
    local setname = cmddict[1]
    local removed = false
    if wearlocreverse[cmddict[2]] then
      wearloc = cmddict[2]
    else
      local ditem = eqdb:getsetitem(cmddict[2], setname)
      if ditem then
        wearloc = ditem.wearloc
      end
    end
    if wearloc then  
      if eqdb:removesetitem(setname, wearloc) == 1 then
        phelper:plugin_header('Remove')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", string.format("Item for %s and wearloc %s was removed", tostring(setname), wearloc))      
        removed = true
      else
        phelper:plugin_header('Remove')
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", string.format("Could not remove %s from %s", wearloc, setname))
      end
    else
      phelper:plugin_header('Remove')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "There was nothing to remove")        
    end
  else
    phelper:plugin_header('Remove')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " remove <setname|level> <location|item> ")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "remove an item from a set and location")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the setname or level")   
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 2 is the location or the item serial")  
  end
end

function cmd_getset(cmddict)
  if cmddict[1] == 'help' then
    phelper:plugin_header('getset')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " getset <setname|level>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "get all items for the set and put them in inventory (or leave them worn if already worn)")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) argument 1 is the level or setname")       
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "If no argument is given, defaults to the set for your current level")       
    return
  end
  local eqset = cmddict[1]
  if not eqset then
    eqset = (tonumber(char.status.level) + (char.base.tier * 10))
  end
  if cmddict[1] then
    local titems = eqdb:getset(eqset)
    for i,v in pairs(titems) do
      putobjectininv(v.serial, true)
    end
  end
end

function cmd_putset(cmddict)
  if cmddict[1] == 'help' then
    phelper:plugin_header('putset')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " putset <setname|level>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "put all items in Inventory (not worn) for the set into their containers")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) argument 1 is the level or setname")      
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "If no argument is given, defaults to the set for your current level")       
    return
  end
  local eqset = cmddict[1]
  if not eqset then
    eqset = (tonumber(char.status.level) + (char.base.tier * 10))
  end
  if cmddict[1] then
    local titems = eqdb:getset(eqset)
    for i,v in pairs(titems) do
      putobjectincontainer(v.serial, v.containerid)
    end
  end   
end

function cmd_clear(cmddict)
  if cmddict[1] then
    if eqdb:clearset(cmddict[1]) > 0 then
      phelper:plugin_header('clear')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "cleared set " .. tostring(cmddict[1]))  
    else
      phelper:plugin_header('clear')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Nothing to clear for set " .. tostring(cmddict[1]))  
    end
  else
    phelper:plugin_header('clear')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " clear <setname|level>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "clear a set, for a level set will only clear items that are the same level, it will not clear")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "items that are carryovers from earlier levels")   
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the level or setname")     
  end
end

function cmd_noset(cmddict)
  if cmddict[1] == 'help' then
    phelper:plugin_header('noset')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " noset <containerid>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "show items that are not in a set")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) the container to check") 
  end
  local sqlstmt = 'select * from items where type = 1 or type = 5 or type = 7 ORDER by containerid'
  if cmddict[1] then
    sqlstmt = string.format('select * from items where (type = 1 or type = 5 or type = 7) and containerid = "%s" ORDER by containerid', tostring(cmddict[1]))
  end
  print(sqlstmt)
  local items = eqdb:runselect(sqlstmt)
  local setitems = eqdb:runselect('select * from eqsets', 'serial')
  local noset = {}
  for i,v in pairs(items) do
    if not setitems[v.serial] then
      noset[v.serial] = v
    end
  end
  for i,v in tableSort(noset, 'containerid', 'Inventory', true) do
    TextToColourTell(string.format('[%-11s] [%-11s] [%4s] %s', tostring(v.serial), v.containerid, v.level, v.cname))
    ColourNote( "", "", "" )   
  end
end

function compitem(item)
  local ditem = eqdb:getitemdetails(item)
  if not ditem then
    print('You do not have item', item)
    return
  end
  local set = eqdb:getset(ditem.level)
  local item1 = nil
  local item2 = nil
  local lstyle1 = {}
  local lstyle2 = {}
  local extras = {serial=true, score=true, noflags=true}
  if set[ditem.wearable] then
    item1 = set[ditem.wearable]
  elseif ditem.wearable == 'ear' then
    item1 = set['lear']
    lstyle1 = buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse['lear']}, extras)
    item2 = set['rear']
    lstyle2 = buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse['rear']}, extras)
  elseif ditem.wearable == 'neck' then
    item1 = set['neck1']
    lstyle1 = buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse['neck1']}, extras)
    item2 = set['neck2']
    lstyle1 = buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse['neck2']}, extras)
  elseif ditem.wearable == 'wrist' then
    item1 = set['lwrist']
    lstyle1 = buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse['lwrist']}, extras)
    item2 = set['rwrist']
    lstyle1 = buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse['rwrist']}, extras)
  elseif ditem.wearable == 'finger' then
    item1 = set['lfinger']
    lstyle1 = buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse['lfinger']}, extras)
    item2 = set['rfinger']
    lstyle1 = buildwornitem({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse['rfinger']}, extras)
  elseif ditem.wearable == 'wield' then
    item1 = set['wielded']
    lstyle1 = buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse['wielded']}, extras)
    item2 = set['second']
    lstyle1 = buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse['second']}, extras)
  end
  if item1 or item2 then
    local cmd = 'comp ' .. tostring(ditem.serial)
    local msg = {}
    print('Comparing')
    if item1 then
      local titem = eqdb:getitemdetails(item1.serial)
      titem.wearslot = wearlocreverse[item1.wearloc]
      lstyle1 = buildwornitemout(titem, extras)
      cmd = cmd .. ' ' .. item1.serial
    end
    table.insert(msg, strjoin('', lstyle1))
    if item2 then
      local titem = eqdb:getitemdetails(item2.serial)
      titem.wearslot = wearlocreverse[item2.wearloc]
      lstyle2 = buildwornitemout(titem, extras)
      cmd = cmd .. ' ' .. item2.serial
    end
    table.insert(msg, strjoin('', lstyle2))
    display(msg)
    runeqdbcmd(cmd)            
  else
    print('nothing in the set to compare to')
  end
end

function cmd_compitem(cmddict)
  if cmddict[1] == 'help' or not cmddict[1] then
    phelper:plugin_header('compitem')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " compitem <serial>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "compare an item to what is worn in the level set for the wear location")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) the serial number of the item")  
    return
  end
  local item = tonumber(cmddict[1])
  local ditem = eqdb:getitemdetails(item)
  if not ditem or (ditem and not ditem['score']) then
    CallPlugin("aaa56faed92ffc6146964abc", "getitemdetails", item, true, true)    
    DoAfterSpecial(5, 'compitem(' .. tostring(item) .. ')', 12)
  else
    compitem(ditem.serial)
  end
end

function cmd_diff(cmddict)
  if cmddict[1] and cmddict[2] then
    local set1 = cmddict[1]
    local set2 = cmddict[2]
    local tset1 = eqdb:getset(set1)
    local tset2 = eqdb:getset(set2)
    local header = false
    local max = math.max(#set1, #set2)
    local format = "%-" .. tostring(max + 1) .. "s %s"
    local msg = {}
    if not next(tset1) then
      phelper:plugin_header('Diff')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "No items in " .. tostring(set1))
      return
    end
    if not next(tset2) then
      phelper:plugin_header('Diff')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "No items in " .. tostring(set2))
      return
    end
    for i=0,#wearlocs do
      local extras = {serial=true, score=true, noflags=true}
      wearloc = wearlocs[i]
      if tset1[wearloc] and tset2[wearloc] then
        if not header then
          header = true
          table.insert(msg, string.rep('-', 80))
          table.insert(msg, string.format(format, 'Set', wornheader(extras)))
          table.insert(msg, string.rep('-', 80))
        end
        if tonumber(tset1[wearloc].serial) == tonumber(tset2[wearloc].serial) then
          -- same
        else
          local eq1 = eqdb:getitemdetails(tset1[wearloc].serial)
          local eq2 = eqdb:getitemdetails(tset2[wearloc].serial)
          eq1.wearslot=i
          table.insert(msg, string.format(format, set1, strjoin('', buildwornitemout(eq1, extras))))
          eq2.wearslot=i
          table.insert(msg, string.format(format, set2, strjoin('', buildwornitemout(eq2, extras))))
          table.insert(msg, string.rep('-', 80))
        end
      elseif tset1[wearloc] then
        if not header then
          header = true
          table.insert(msg, string.rep('-', 80))
          table.insert(msg, string.format(format, 'Set', wornheader(extras)))            
          table.insert(msg, string.rep('-', 80))
        end      
        local eq1 = eqdb:getitemdetails(tset1[wearloc].serial)
        eq1.wearslot=i
        table.insert(msg, string.format(format, set1, strjoin('', buildwornitemout(eq1, extras))))
        table.insert(msg, string.format(format, set2, strjoin('', buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=i}, extras))))
        table.insert(msg, string.rep('-', 80))
      elseif tset2[wearloc] then
        if not header then
          header = true
          table.insert(msg, string.rep('-', 80))
          table.insert(msg, string.format(format, 'Set', wornheader(extras)))   
          table.insert(msg, string.rep('-', 80))
        end      
        local eq2 = eqdb:getitemdetails(tset2[wearloc].serial)
        eq2.wearslot=i
        table.insert(msg, string.format(format, set1, strjoin('', buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=i}, extras))))
        table.insert(msg, string.format(format, set2, strjoin('', buildwornitemout(eq2, extras))))
        table.insert(msg, string.rep('-', 80))        
      end
    end
    display(msg)
  else
    phelper:plugin_header('Diff')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " diff <set1> <set2>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "show differences between two sets, can be level or named")  
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the level or setname")     
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 2 is the level or setname to compare")     
  end
end

function cmd_show(cmddict)
  if cmddict[1] == 'help' then
    phelper:plugin_header('show')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " show <level|setname> <'only'> <wearloc>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "show all items for a set")        
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the level or setname, can be multiple")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) the keyword 'only', which will only show items of that level if a level set")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) wearloc, the wearloc to show, can be multiple")      
    return
  end
  local msg = {}
  local wearlocstoshow = {}
  local removeindexes = {}
  local itemstoshow = {}
  local only = false
  if not cmddict[1] then
    cmddict[1] = tonumber(char.status.level) + (tonumber(char.base.tier) * 10) 
  end
  for i,v in ipairs(cmddict) do
    if v == 'only' then
      only = true
      table.insert(removeindexes, i)
    elseif wearlocreverse[v] then
      --print('got a wearloc', v)
      table.insert(wearlocstoshow, v)
      table.insert(removeindexes, i)
    end
  end
  if next(removeindexes) then
    for i,v in tableSort(removeindexes, nil, nil, true) do
      table.remove(cmddict, v)
    end
  end
  if not cmddict[1] then
    cmddict[1] = tonumber(char.status.level) + (tonumber(char.base.tier) * 10)
  end
  local extras = {serial=true, score=true, noflags=true} 
  for _,v in ipairs(cmddict) do
    local items = eqdb:getset(v)
    table.insert(msg, 'Set ' .. tostring(v))
    table.insert(msg, wornheader(extras))      
    table.insert(msg, string.rep('-', 80))
    if next(wearlocstoshow) then
      for i2,wearloc in ipairs(wearlocstoshow) do
        local aitem = items[wearloc]
        local titem = nil
        if aitem then
          titem = eqdb:getitemdetails(aitem.serial)            
        end
        if titem then
          titem.wearslot = wearlocreverse[wearloc]
          table.insert(msg, strjoin('', buildwornitemout(titem, extras)))
          table.insert(itemstoshow, aitem.serial)
        else
          table.insert(msg, strjoin('', buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=wearlocreverse[wearloc]}, extras)))
        end
      end
    else
      for i=0,#wearlocs do
        actualslot = i
        local aitem = items[wearlocs[i]]
        local titem = nil
        if aitem then
          titem = eqdb:getitemdetails(aitem.serial)
        end
        local sitem = ''
        if titem then
          titem.wearslot = i
          if not only or (only and titem.level == tonumber(v)) then
            sitem = strjoin('', buildwornitemout(titem, extras))
          end
        elseif not only then
          local doit = true
          if actualslot == 28 or actualslot == 29 or actualslot == 8 or actualslot == 9 or actualslot == 10 or actualslot == 11 then
            doit = false
          end
          if doit then
            sitem = strjoin('', buildwornitemout({cname="@r< empty >@w", shortflags="", wearslot=actualslot}, extras))
          end
        end
        if sitem ~= '' then
          table.insert(msg, sitem)
        end      
      end
    end
    table.insert(msg, '')
  end
  display(msg)    
  if next(itemstoshow) then
    runeqdbcmd('getitem ' .. strjoin(' ', itemstoshow))    
  end
end

function display( msg )
  for i,v in ipairs(msg) do
    TextToColourTell(v)
    ColourNote( "", "", "" )    
  end
  ColourNote( "", "", "" )
end

function onitemchange(stuff)
  local stuff = assert (loadstring ('return ' .. stuff or ""))()
  if stuff.serial == olditem.serial and stuff.keywords then
    --print('setting gotscore')
    --tprint(stuff)
    olditem.gotscore = true
  elseif stuff.serial == tonumber(olditem.containerid) and olditem.gotscore then
    --print('onitemchange: have gotscore and containerid')
    phelper:unregister_remote("aaa56faed92ffc6146964abc", "itemchange", "onitemchange", true)
    olditem = {}
    cmd_add(olddict)    
  end
end
]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  phelper:OnPluginBroadcast(msg, id, name, text)
  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char") then
      local res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
      char = assert (loadstring ('return ' .. gmcparg or ""))()
    end
  end
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()

  phelper:OnPluginEnable()
  
  if IsConnected() then
    CallPlugin("3e7dedbe37e44942dd46d264","Send_GMCP_Packet","request char")
  end

end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[


phelper:set_default('plugin_colour', 'orange')
phelper:set_default('cmd', 'eqs')

phelper:add_cmd('list', {func=cmd_list, help="list eqsets", sortgroup="Creating, Modifying and Deleting", prio=40})
phelper:add_cmd('add', {func=cmd_add, help="add an item to an eqset", sortgroup="Creating, Modifying and Deleting", prio=41})
phelper:add_cmd('remove', {func=cmd_remove, help="remove an item from an eqset", sortgroup="Creating, Modifying and Deleting", prio=42})
phelper:add_cmd('clear', {func=cmd_clear, help="clear an eqset, either named or level", sortgroup="Creating, Modifying and Deleting", prio=43})

phelper:add_cmd('checklevel', {func=cmd_checklevel, help="check to see if wearing all items of your current level", sortgroup="Wearing a set", prio=44})
phelper:add_cmd('wearset', {func=cmd_wearset, help="wear a set", sortgroup="Wearing a set", prio=45})

phelper:add_cmd('show', {func=cmd_show, help="show the eq for a set", sortgroup="Obtaining info about a set", prio=46})
phelper:add_cmd('stats', {func=cmd_getstats, help="get the stats for a set", sortgroup="Obtaining info about a set", prio=47})
phelper:add_cmd('diff', {func=cmd_diff, help="diff two sets", sortgroup="Obtaining info about a set", prio=48})
phelper:add_cmd('noset', {func=cmd_noset, help="show items that are not in sets", sortgroup="Obtaining info about a set", prio=49})
phelper:add_cmd('compitem', {func=cmd_compitem, help="compare an item to a set", sortgroup="Obtaining info about a set", prio=50})

phelper:add_cmd('getset', {func=cmd_getset, help="get all items for a set and put them in inventory (or leave them worn if already worn)", sortgroup="Manipulating items in a set", prio=60})
phelper:add_cmd('putset', {func=cmd_putset, help="put all items for a set into their target container", sortgroup="Manipulating items in a set", prio=61})

phelper:add_cmd('close', {func=cmd_close, help="close the db", sortgroup="Misc", prio=51})

phelper:enable()
]]>
</script>
</muclient>
